Redis 常见误解
=======================


Redis 占用的内存比关系式数据库要多
--------------------------------------

原因，
两种数据库的运作方式不同：

- Redis 是内存数据库，它将值直接放在内存里面，当需要值的时候，就可以直接在内存里面查找，这保证了 Redis 命令的执行速度

- 关系式数据库一般只将值的索引保存在内存里面，而将值本身保存在磁盘里面，当需要值的时候，程序先查找索引，再读磁盘，将值载入到内存，然后内存中的值返回给用户，这个过程通常比直接读内存要慢得多。

例子，对于同样三个值 ``apple`` 、 ``banana`` 和 ``cherry`` 来说：

- Redis 会将这三个值直接保存在内存里。

- 而关系式数据库可能只会保存 ``a`` 、 ``b`` 、 ``c`` 作为磁盘中的 ``apple`` 、 ``banana`` 和 ``cherry`` 三个值的索引。

结论：Redis 和关系式数据库的内存问题其实是内存数据库（in-memory database）和磁盘数据库（in-disk database）之间的运作原理不同造成的，这是本质上的问题，和 Redis 、甚至单个内存数据库的效率并没有关系。

实际上，Redis 的实现本身使用了内存编码数据结构、共享对象、定期主动回收过期键等多项功能来保证尽可能地少用内存。

.. seealso:: 延伸阅读

    《Redis 设计与实现》书中提到的
    `Redis 内存编码数据结构的实现 <http://www.redisbook.com/en/latest/#id2>`_ 
    以及
    `Redis 共享对象的实现 <http://www.redisbook.com/en/latest/datatype/object.html>`_ 。


Redis 和 Memcached 的功能一样
--------------------------------

Memcached 提供的功能只是 Redis 功能的一个子集，
以下是 Memcached 服务器可执行的命令，
以及与这些命令效果相同的 Redis 命令。

======================  ===================================================     ===========================================================
Memcached 命令          Redis 命令                                              效果
======================  ===================================================     ===========================================================
``set``                 :ref:`redisref:SET`                                     为键设置值，并覆盖已有的值
``add``                 :ref:`redisref:SETNX`                                   只在键没有值时的情况下为键设置值
``replace``             :ref:`redisref:SETEX`                                   只在键已经设置了值的情况下，为键设置新值
``append``              :ref:`redisref:APPEND` 或者 :ref:`redisref:RPUSH`       将新值添加到已有值的末尾
``prepend``             :ref:`redisref:LPUSH`                                   将新值添加到已有值的前面
``cas``                 Redis 的事务命令                                        仅在值没有被其他客户端修改过的情况下，才为键设置新值
``get``                 :ref:`redisref:GET`                                     获取键的值
``gets``                Redis 的事务命令                                        带有 CAS 性质的 ``get`` 命令
``delete``              :ref:`redisref:DEL`                                     删除给定的键
``incr``                :ref:`redisref:INCR`                                    对键保存的整数值进行加一操作
``decr``                :ref:`redisref:DECR`                                    对键保存的整数值进行减一操作
``stats``               :ref:`redisref:dbsize` 和 :ref:`redisref:INFO`          返回系统的统计信息
``flush_all``           :ref:`redisref:flushdb`                                 删除
======================  ===================================================     ===========================================================

.. 将 Redis 的事务命令连向 Redis 命令参考的《事务》 topic

这些命令里的一些实现细节上面是有差别的，
但总体上的效果是一样的。

Redis 提供了字符串（string）、列表（list）、哈希（hash）、集合（set）、有序集合（sorted set）等五种数据类型，
除了以上提到的可以用于替换 Memcached 的命令之外，
Redis 还有很多其他命令可用，
所以 Redis 的功能要比 Memcached 要丰富得多。

Memcached 目前对比 Redis 的优势是，Memcached 是一个老牌的缓存系统，它的各种客户端（支持集群功能）非常丰富，而 Redis 的集群功能仍在开发当中，预计要在下一版才会正式推出。

.. seealso:: 延伸阅读

    StackOverflow 上的 `Memcached vs. Redis ? <http://stackoverflow.com/questions/10558465/memcache-vs-redis>`_ 问题和 `Is memcached a dinosaur in comparison to Redis ? <http://stackoverflow.com/questions/2873249/is-memcached-a-dinosaur-in-comparison-to-redis/8494397#8494397>`_ 问题。


Redis 会丢失数据，所以它只能作为缓存使用，而不能作为数据库
--------------------------------------------------------------

两个误解：

1. Redis 是一个内存数据库，一旦服务器停机，数据就会消失 —— 这是误解，因为 Redis 有 RDB 和 AOF 两种持久化模式。

2. 即使 Redis 使用了持久化功能，服务器停机时仍然会丢失数据， Redis 的安全性不如传统关系式数据库 —— 这是对 RDB 和 AOF 两种持久化模式的运作方式有误解。

两种持久化：

1. RDB ，每隔一段时间生成一次整个数据库的快照，适合用于备份。

2. AOF ，每隔一小段时间，或者每执行 N 个命令执行，将被执行的命令追加到一个文件里面，使用这个文件可以还原数据库状态，和关系式数据库的持久化方式类似。

其中， AOF 的 appendfsync 选项的三种模式：

1. no

2. everysec

3. always 

中的 always 模式可以让 Redis 每执行一个命令就将命令的信息保存到磁盘里面，所以即使出现停机，你也只会丢失一个命令的数据，这种安全集合和关系式数据库是一样的。

不过 always 模式的速度太慢了，一般使用 everysec 模式，这种模式使用一个后台线程对文件进行 fsync 操作，就算出现停机，也只会丢失一秒钟的数据，这对于大部分非重要的应用程序来说，这是可以接受的。

.. seealso:: 延伸阅读

    Redis 作者写的《解密持久化》一文深入地分析了 Redis 的持久化模式的实现，
    以及 Redis 的持久化模式和常见关系式数据库之间的异同：
    http://blog.nosqlfan.com/html/3813.html


Redis 不能执行复杂的操作，比如反向搜索
------------------------------------------

使用 EVAL

.. 提醒一下，目前的很多 ORM 都是直接使用命令来执行操作的，效率很差


Redis 不能保存和处理结构化数据，比如 JSON 
----------------------------------------------

用 EVAL 命令可以实现，不过要自己管理键的名字，因为键名可以使用程序来生成，所以这一般不算什么。

使用 MongoDB 和 Redis 作为对比例子。


Redis 是一个单机数据库
---------------------------------

现在 Redis 的 Replication 和 Sentinel 已经可用了，
而 Cluster 功能正在开发中。
